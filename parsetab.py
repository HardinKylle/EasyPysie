
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND ASSIGN COMMA DIVIDE ELSE EQ FLOAT FOR FUNCTION GEQ GT IDENTIFIER IF INPUT LBRACE LEQ LPAREN LT MINUS NEQ NOT NUMBER OR PLUS PRINT RBRACE RPAREN SEMICOLON STRING TIMES WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : assignment_statement\n| expression_statementassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,8,10,11,12,13,14,15,16,25,],[6,6,-3,-4,-5,18,-2,18,-7,18,18,18,18,-6,]),'LPAREN':([0,2,3,4,5,8,10,11,12,13,14,15,16,25,],[8,8,-3,-4,-5,8,-2,8,-7,8,8,8,8,-6,]),'NUMBER':([0,2,3,4,5,8,10,11,12,13,14,15,16,25,],[9,9,-3,-4,-5,9,-2,9,-7,9,9,9,9,-6,]),'$end':([1,2,3,4,5,10,12,25,],[0,-1,-3,-4,-5,-2,-7,-6,]),'ASSIGN':([6,],[11,]),'SEMICOLON':([6,7,9,18,19,20,21,22,23,24,],[-14,12,-13,-14,25,-8,-9,-10,-11,-12,]),'PLUS':([6,7,9,17,18,19,20,21,22,23,24,],[-14,13,-13,13,-14,13,-8,-9,-10,-11,-12,]),'MINUS':([6,7,9,17,18,19,20,21,22,23,24,],[-14,14,-13,14,-14,14,-8,-9,-10,-11,-12,]),'TIMES':([6,7,9,17,18,19,20,21,22,23,24,],[-14,15,-13,15,-14,15,15,15,-10,-11,-12,]),'DIVIDE':([6,7,9,17,18,19,20,21,22,23,24,],[-14,16,-13,16,-14,16,16,16,-10,-11,-12,]),'RPAREN':([9,17,18,20,21,22,23,24,],[-13,24,-14,-8,-9,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,10,]),'assignment_statement':([0,2,],[4,4,]),'expression_statement':([0,2,],[5,5,]),'expression':([0,2,8,11,13,14,15,16,],[7,7,17,19,20,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',15),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',19),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',20),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',28),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',32),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',36),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',40),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',41),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',42),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',43),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',47),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',51),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',55),
]
